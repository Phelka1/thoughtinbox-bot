import os, json, random
from datetime import datetime, timedelta
from telebot import TeleBot, types
from types import SimpleNamespace
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

TOKEN = os.getenv("TOKEN")
bot = TeleBot(TOKEN, parse_mode="HTML")

DATA_FILE = "thoughts.json"
REMIND_FILE = "reminders.json"
scheduler = BackgroundScheduler(timezone="UTC")
scheduler.start()


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def read_json(path, default):
    if not os.path.exists(path):
        return default
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def write_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def load_data():
    return read_json(DATA_FILE, {})

def save_data(data):
    write_json(DATA_FILE, data)


# === –†–∞–±–æ—Ç–∞ —Å –º—ã—Å–ª—è–º–∏ ===
def add_thought(uid, text):
    data = load_data()
    u = str(uid)
    if u not in data:
        data[u] = []
    tags = [w[1:].lower() for w in text.split() if w.startswith("#")]
    data[u].append({
        "id": len(data[u]) + 1,
        "text": text,
        "tags": tags,
        "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    })
    save_data(data)


# === –ú–µ–Ω—é ===
def main_menu():
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("üìã –ú—ã—Å–ª–∏", callback_data="inbox"),
        types.InlineKeyboardButton("üåÖ –°–µ–≥–æ–¥–Ω—è", callback_data="today")
    )
    kb.add(
        types.InlineKeyboardButton("üè∑Ô∏è –¢–µ–≥–∏", callback_data="tags"),
        types.InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export")
    )
    kb.add(
        types.InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è", callback_data="random"),
        types.InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    )
    kb.add(
        types.InlineKeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="remind_menu"),
        types.InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear")
    )
    return kb


# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ===
def reminders_db():
    return read_json(REMIND_FILE, {})

def save_reminders(data):
    write_json(REMIND_FILE, data)


def schedule(uid, mode, value):
    job_id = f"rem_{uid}"
    try:
        scheduler.remove_job(job_id)
    except:
        pass

    if mode == "daily":
        h, m = map(int, value.split(":"))
        trig = CronTrigger(hour=h, minute=m)
    elif mode == "weekday":
        h, m = map(int, value.split(":"))
        trig = CronTrigger(hour=h, minute=m, day_of_week="mon-fri")
    elif mode == "interval":
        trig = IntervalTrigger(hours=int(value))
    else:
        return

    scheduler.add_job(lambda: send_rem(uid), trig, id=job_id)


def send_rem(uid):
    bot.send_message(int(uid), "üêù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ï—Å—Ç—å –Ω–æ–≤–∞—è –º—ã—Å–ª—å –¥–ª—è —É–ª–µ—è? üí≠", reply_markup=main_menu())


@bot.message_handler(commands=["remind"])
def remind_cmd(message):
    args = message.text.split(maxsplit=1)
    rem = reminders_db()
    uid = str(message.from_user.id)

    if len(args) == 1:
        val = rem.get(uid, {"mode": "off"})
        bot.send_message(message.chat.id, f"üîî –¢–µ–∫—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {val}")
        return

    arg = args[1].strip().lower()
    if arg == "off":
        try:
            scheduler.remove_job(f"rem_{uid}")
        except:
            pass
        rem[uid] = {"mode": "off"}
        save_reminders(rem)
        bot.send_message(message.chat.id, "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        return

    # –§–æ—Ä–º–∞—Ç—ã: daily 10:00, weekday 9:00, interval 3
    try:
        parts = arg.split()
        mode = parts[0]
        value = parts[1]
        schedule(uid, mode, value)
        rem[uid] = {"mode": mode, "value": value}
        save_reminders(rem)
        bot.send_message(message.chat.id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {mode} {value}")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –§–æ—Ä–º–∞—Ç: /remind daily 10:00 | weekday 9:30 | interval 3 | off")


# === Callback ===
@bot.callback_query_handler(func=lambda c: True)
def callback(c):
    data = load_data()
    uid = str(c.from_user.id)

    if c.data == "remind_menu":
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("üïê –ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="rem_daily"))
        kb.add(types.InlineKeyboardButton("üìÖ –ü–æ –±—É–¥–Ω—è–º", callback_data="rem_weekday"))
        kb.add(types.InlineKeyboardButton("‚è±Ô∏è –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞", callback_data="rem_interval"))
        kb.add(types.InlineKeyboardButton("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="rem_off"))
        bot.send_message(c.message.chat.id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=kb)

    elif c.data.startswith("rem_"):
        rem = reminders_db()
        if c.data == "rem_off":
            try:
                scheduler.remove_job(f"rem_{uid}")
            except:
                pass
            rem[uid] = {"mode": "off"}
            bot.send_message(c.message.chat.id, "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        elif c.data == "rem_daily":
            schedule(uid, "daily", "10:00")
            rem[uid] = {"mode": "daily", "value": "10:00"}
            bot.send_message(c.message.chat.id, "üîî –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (10:00 UTC).")
        elif c.data == "rem_weekday":
            schedule(uid, "weekday", "09:00")
            rem[uid] = {"mode": "weekday", "value": "09:00"}
            bot.send_message(c.message.chat.id, "üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –±—É–¥–Ω—è–º (09:00 UTC).")
        elif c.data == "rem_interval":
            schedule(uid, "interval", "3")
            rem[uid] = {"mode": "interval", "value": "3"}
            bot.send_message(c.message.chat.id, "‚è±Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞.")
        save_reminders(rem)
    bot.answer_callback_query(c.id)


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º—ã—Å–ª–µ–π ===
@bot.message_handler(func=lambda m: True)
def save_msg(m):
    if not m.text.startswith("/"):
        add_thought(m.from_user.id, m.text)
        bot.send_message(m.chat.id, "üí° –°–æ—Ö—Ä–∞–Ω–∏–ª!", reply_markup=main_menu())


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    for uid, val in reminders_db().items():
        if val.get("mode") != "off":
            try:
                schedule(uid, val["mode"], val["value"])
            except:
                pass
    bot.polling(none_stop=True)
    if __name__ == "__main__":
    # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
    for uid, val in reminders_db().items():
        if val.get("mode") != "off":
            try:
                schedule(uid, val["mode"], val["value"])
            except:
                pass

    # –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–ø—Ä–æ—Å–∞ ‚Äî –ø–æ–ø—Ä–æ—Å–∏—Ç—å –¢–µ–ª–µ–≥—Ä–∞–º "–∑–∞–±—ã—Ç—å" —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        bot.delete_webhook(drop_pending_updates=True)
    except:
        pass

    bot.polling(none_stop=True)
    
    
