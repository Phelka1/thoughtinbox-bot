import os, json, random
from datetime import datetime
from telebot import TeleBot, types
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("TOKEN")  # –Ω–∞ Render —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ Environment
bot = TeleBot(TOKEN, parse_mode="HTML")

DATA_FILE = "thoughts.json"
REMIND_FILE = "reminders.json"

scheduler = BackgroundScheduler(timezone="UTC")
scheduler.start()


# === –£—Ç–∏–ª–∏—Ç—ã —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ ===
def _read_json(path, default):
    if not os.path.exists(path):
        return default
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def _write_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_data():
    return _read_json(DATA_FILE, {})

def save_data(data):
    _write_json(DATA_FILE, data)


# === –õ–æ–≥–∏–∫–∞ –º—ã—Å–ª–µ–π ===
def add_thought(uid, text):
    data = load_data()
    u = str(uid)
    if u not in data:
        data[u] = []
    tags = [w[1:].lower() for w in text.split() if w.startswith("#")]
    data[u].append({
        "id": len(data[u]) + 1,
        "text": text,
        "tags": tags,
        "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    })
    save_data(data)


# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu():
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("üìã –ú—ã—Å–ª–∏", callback_data="inbox"),
        types.InlineKeyboardButton("üåÖ –°–µ–≥–æ–¥–Ω—è", callback_data="today")
    )
    kb.add(
        types.InlineKeyboardButton("üè∑Ô∏è –¢–µ–≥–∏", callback_data="tags"),
        types.InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export")
    )
    kb.add(
        types.InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è", callback_data="random"),
        types.InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    )
    kb.add(
        types.InlineKeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="remind_menu"),
        types.InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear")
    )
    return kb


# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ===
def reminders_db():
    return _read_json(REMIND_FILE, {})

def save_reminders(data):
    _write_json(REMIND_FILE, data)

def schedule(uid, mode, value):
    job_id = f"rem_{uid}"
    try:
        scheduler.remove_job(job_id)
    except Exception:
        pass

    if mode == "daily":
        h, m = map(int, value.split(":"))
        trigger = CronTrigger(hour=h, minute=m)
    elif mode == "weekday":
        h, m = map(int, value.split(":"))
        trigger = CronTrigger(hour=h, minute=m, day_of_week="mon-fri")
    elif mode == "interval":
        trigger = IntervalTrigger(hours=int(value))
    else:
        return

    scheduler.add_job(lambda: send_rem(uid), trigger, id=job_id)

def send_rem(uid):
    bot.send_message(int(uid), "üêù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ï—Å—Ç—å –Ω–æ–≤–∞—è –º—ã—Å–ª—å –¥–ª—è —É–ª–µ—è? üí≠", reply_markup=main_menu())

@bot.message_handler(commands=["remind"])
def remind_cmd(message):
    args = message.text.split(maxsplit=1)
    rem = reminders_db()
    uid = str(message.from_user.id)

    # –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ
    if len(args) == 1:
        bot.send_message(message.chat.id, f"üîî –¢–µ–∫—É—â–µ–µ: {rem.get(uid, {'mode':'off'})}")
        return

    arg = args[1].strip().lower()
    if arg == "off":
        try:
            scheduler.remove_job(f"rem_{uid}")
        except Exception:
            pass
        rem[uid] = {"mode": "off"}
        save_reminders(rem)
        bot.send_message(message.chat.id, "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        return

    # –≤–∞—Ä–∏–∞–Ω—Ç—ã: daily 10:00 | weekday 9:30 | interval 3
    try:
        mode, value = arg.split()
        schedule(uid, mode, value)
        rem[uid] = {"mode": mode, "value": value}
        save_reminders(rem)
        bot.send_message(message.chat.id, f"üîî –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {mode} {value}")
    except Exception:
        bot.send_message(message.chat.id, "‚ùå –§–æ—Ä–º–∞—Ç: /remind daily 10:00 | weekday 9:30 | interval 3 | off")


# === –ö–æ–º–∞–Ω–¥—ã ===
@bot.message_handler(commands=["start"])
def start_cmd(message):
    bot.send_message(
        message.chat.id,
        "üêù –ü—Ä–∏–≤–µ—Ç! –Ø ThoughtInbox. –ü–∏—à–∏ –º—ã—Å–ª—å (–º–æ–∂–Ω–æ —Å #—Ç–µ–≥–∞–º–∏) ‚Äî —è —Å–æ—Ö—Ä–∞–Ω—é.\n\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=["help"])
def help_cmd(message):
    bot.send_message(
        message.chat.id,
        "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
        "/inbox ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º—ã—Å–ª–∏\n"
        "/review ‚Äî –º—ã—Å–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/tags ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤\n"
        "/export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–º–µ—Ç–æ–∫\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/find —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–∏—Å–∫\n"
        "/random ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –º—ã—Å–ª—å\n"
        "/remind ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å\n"
        "/remind daily 10:00 ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
        "/remind weekday 9:30 ‚Äî –ø–æ –±—É–¥–Ω—è–º\n"
        "/remind interval 3 ‚Äî –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞\n"
        "/remind off ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å"
    )

@bot.message_handler(commands=["find"])
def find_cmd(message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /find —Å–ª–æ–≤–æ")
        return
    query = args[1].lower()
    data = load_data()
    uid = str(message.from_user.id)
    res = [t for t in data.get(uid, []) if query in t["text"].lower()]
    if not res:
        bot.send_message(message.chat.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üîç")
        return
    msg = "\n".join(f"‚Ä¢ {t['text']} ({t['time']})" for t in res[-10:])
    bot.send_message(message.chat.id, f"üîé –ù–∞–π–¥–µ–Ω–æ:\n{msg}")

@bot.message_handler(commands=["review"])
def review_cmd(message):
    data = load_data()
    uid = str(message.from_user.id)
    today = datetime.utcnow().strftime("%Y-%m-%d")
    items = [t for t in data.get(uid, []) if today in t["time"]]
    if not items:
        bot.send_message(message.chat.id, "–°–µ–≥–æ–¥–Ω—è –º—ã—Å–ª–µ–π –Ω–µ—Ç ‚òÄÔ∏è")
        return
    msg = "\n".join(f"‚Ä¢ {t['text']}" for t in items)
    bot.send_message(message.chat.id, f"üåÖ –ú—ã—Å–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{msg}")

@bot.message_handler(commands=["export"])
def export_cmd(message):
    data = load_data()
    uid = str(message.from_user.id)
    items = data.get(uid, [])
    if not items:
        bot.send_message(message.chat.id, "–ù–µ—Ç –º—ã—Å–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ üìÇ")
        return
    fname = f"thoughts_{uid}.txt"
    with open(fname, "w", encoding="utf-8") as f:
        for t in items:
            tags = " ".join(f"#{tg}" for tg in t["tags"])
            f.write(f"{t['time']} ‚Äî {t['text']} {tags}\n")
    with open(fname, "rb") as f:
        bot.send_document(message.chat.id, f)
    os.remove(fname)

@bot.message_handler(commands=["stats"])
def stats_cmd(message):
    data = load_data()
    uid = str(message.from_user.id)
    items = data.get(uid, [])
    if not items:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –ø—É—Å—Ç–æ üìâ")
        return
    total = len(items)
    tag_count = {}
    for t in items:
        for tg in t["tags"]:
            tag_count[tg] = tag_count.get(tg, 0) + 1
    top = ", ".join(f"#{k}({v})" for k, v in sorted(tag_count.items(), key=lambda x: -x[1]))
    bot.send_message(message.chat.id, f"üìà –í—Å–µ–≥–æ –º—ã—Å–ª–µ–π: {total}\n–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏: {top or '‚Äî'}")


# === Callback-–∏–Ω–ª–∞–π–Ω (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) ===
@bot.callback_query_handler(func=lambda c: True)
def callbacks(c):
    uid = str(c.from_user.id)
    chat_id = c.message.chat.id
    data_all = load_data()

    try:
        if c.data == "inbox":
            items = data_all.get(uid, [])
            if not items:
                bot.send_message(chat_id, "–ù–µ—Ç –º—ã—Å–ª–µ–π üóíÔ∏è")
                return
            msg = "\n".join(f"‚Ä¢ {t['text']} ({t['time']})" for t in items[-10:])
            bot.send_message(chat_id, f"üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ:\n{msg}")

        elif c.data == "today":
            today = datetime.utcnow().strftime("%Y-%m-%d")
            items = [t for t in data_all.get(uid, []) if today in t["time"]]
            if not items:
                bot.send_message(chat_id, "–°–µ–≥–æ–¥–Ω—è –º—ã—Å–ª–µ–π –Ω–µ—Ç ‚òÄÔ∏è")
                return
            msg = "\n".join(f"‚Ä¢ {t['text']}" for t in items)
            bot.send_message(chat_id, f"üåÖ –ú—ã—Å–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{msg}")

        elif c.data == "tags":
            tags = sorted({tg for t in data_all.get(uid, []) for tg in t["tags"]})
            if not tags:
                bot.send_message(chat_id, "üè∑Ô∏è –¢–µ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
                return
            kb = types.InlineKeyboardMarkup()
            for tg in tags:
                kb.add(types.InlineKeyboardButton(f"#{tg}", callback_data=f"tag_{tg}"))
            bot.send_message(chat_id, "üè∑Ô∏è –í—ã–±–µ—Ä–∏ —Ç–µ–≥:", reply_markup=kb)

        elif c.data.startswith("tag_"):
            tag = c.data[4:]
            items = [t for t in data_all.get(uid, []) if tag in t["tags"]]
            msg = "\n".join(f"‚Ä¢ {t['text']}" for t in items) or "–ù–µ—Ç –º—ã—Å–ª–µ–π —Å —ç—Ç–∏–º —Ç–µ–≥–æ–º."
            bot.send_message(chat_id, f"#{tag}:\n{msg}")

        elif c.data == "export":
            items = data_all.get(uid, [])
            if not items:
                bot.send_message(chat_id, "–ù–µ—Ç –º—ã—Å–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ üìÇ")
                return
            fname = f"thoughts_{uid}.txt"
            with open(fname, "w", encoding="utf-8") as f:
                for t in items:
                    tags = " ".join(f"#{tg}" for tg in t["tags"])
                    f.write(f"{t['time']} ‚Äî {t['text']} {tags}\n")
            with open(fname, "rb") as f:
                bot.send_document(chat_id, f)
            os.remove(fname)

        elif c.data == "random":
            items = data_all.get(uid, [])
            if not items:
                bot.send_message(chat_id, "–ü–æ–∫–∞ –ø—É—Å—Ç–æ üêù")
                return
            t = random.choice(items)
            bot.send_message(chat_id, f"üé≤ {t['text']}")

        elif c.data == "stats":
            items = data_all.get(uid, [])
            if not items:
                bot.send_message(chat_id, "–ü–æ–∫–∞ –ø—É—Å—Ç–æ üìâ")
                return
            total = len(items)
            tag_count = {}
            for t in items:
                for tg in t["tags"]:
                    tag_count[tg] = tag_count.get(tg, 0) + 1
            top = ", ".join(f"#{k}({v})" for k, v in sorted(tag_count.items(), key=lambda x: -x[1]))
            bot.send_message(chat_id, f"üìà –í—Å–µ–≥–æ –º—ã—Å–ª–µ–π: {total}\n–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏: {top or '‚Äî'}")

        elif c.data == "clear":
            data_all[uid] = []
            save_data(data_all)
            bot.send_message(chat_id, "üßπ –í—Å—ë –æ—á–∏—â–µ–Ω–æ.")

        elif c.data == "remind_menu":
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("üïê –ï–∂–µ–¥–Ω–µ–≤–Ω–æ 10:00", callback_data="rem_d_10"))
            kb.add(types.InlineKeyboardButton("üìÖ –ë—É–¥–Ω–∏ 09:00", callback_data="rem_w_09"))
            kb.add(types.InlineKeyboardButton("‚è±Ô∏è –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞", callback_data="rem_i_3"))
            kb.add(types.InlineKeyboardButton("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="rem_off"))
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", reply_markup=kb)

        elif c.data in ("rem_d_10", "rem_w_09", "rem_i_3", "rem_off"):
            rem = reminders_db()
            if c.data == "rem_off":
                try:
                    scheduler.remove_job(f"rem_{uid}")
                except Exception:
                    pass
                rem[uid] = {"mode": "off"}
                bot.send_message(chat_id, "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
            elif c.data == "rem_d_10":
                schedule(uid, "daily", "10:00")
                rem[uid] = {"mode": "daily", "value": "10:00"}
                bot.send_message(chat_id, "üîî –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00 (UTC).")
            elif c.data == "rem_w_09":
                schedule(uid, "weekday", "09:00")
                rem[uid] = {"mode": "weekday", "value": "09:00"}
                bot.send_message(chat_id, "üìÖ –ü–æ –±—É–¥–Ω—è–º –≤ 09:00 (UTC).")
            elif c.data == "rem_i_3":
                schedule(uid, "interval", "3")
                rem[uid] = {"mode": "interval", "value": "3"}
                bot.send_message(chat_id, "‚è±Ô∏è –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞.")
            save_reminders(rem)

    except Exception as e:
        try:
            bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        except:
            pass
        print("Callback error:", e)
    finally:
        try:
            bot.answer_callback_query(c.id)
        except:
            pass


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ===
@bot.message_handler(func=lambda m: True)
def save_msg(m):
    if not m.text.startswith("/"):
        add_thought(m.from_user.id, m.text)
        bot.send_message(m.chat.id, "üí° –°–æ—Ö—Ä–∞–Ω–∏–ª!", reply_markup=main_menu())


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for uid, val in reminders_db().items():
        if val.get("mode") != "off":
            try:
                schedule(uid, val["mode"], val["value"])
            except Exception:
                pass

    # —Å–±—Ä–æ—Å–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–π –≤–µ–±—Ö—É–∫ –∏ ¬´—Ö–≤–æ—Å—Ç—ã¬ª –∞–ø–¥–µ–π—Ç–æ–≤
    try:
        bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass

    bot.polling(none_stop=True)
                            
