import telebot
import json
import os
from datetime import datetime
from telebot import types

# üîë –¢–æ–∫–µ–Ω –∏–∑ Render (–∏–ª–∏ –≤—Å—Ç–∞–≤—å –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ —Ç–µ—Å—Ç–µ –≤ Pydroid)
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

DATA_FILE = "thoughts.json"


# üß† --- –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ ---
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def add_thought(user_id, text):
    data = load_data()
    user_id = str(user_id)
    if user_id not in data:
        data[user_id] = []

    tags = [word[1:].lower() for word in text.split() if word.startswith("#")]
    entry = {
        "text": text,
        "tags": tags,
        "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    data[user_id].append(entry)
    save_data(data)


# üßæ --- –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ ---
def main_menu():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("üìã –ú—ã—Å–ª–∏", callback_data="inbox"),
        types.InlineKeyboardButton("üåÖ –°–µ–≥–æ–¥–Ω—è", callback_data="review"),
    )
    keyboard.add(
        types.InlineKeyboardButton("üè∑Ô∏è –¢–µ–≥–∏", callback_data="tags"),
        types.InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export"),
    )
    keyboard.add(
        types.InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear")
    )
    return keyboard


# üìã --- –ö–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ThoughtInbox ü§ñ\n"
        "–ü–∏—à–∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏, –¥–æ–±–∞–≤–ª—è–π #—Ç–µ–≥–∏, –∞ —è –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω—é.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=main_menu()
    )


@bot.message_handler(commands=["help"])
def help_cmd(message):
    bot.send_message(
        message.chat.id,
        "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –º–µ–Ω—é –∏ –∫–Ω–æ–ø–∫–∏\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/inbox ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º—ã—Å–ª–∏\n"
        "/review ‚Äî –º—ã—Å–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/tags ‚Äî —Ç–≤–æ–∏ —Ç–µ–≥–∏\n"
        "/export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –º—ã—Å–ª–µ–π\n"
        "/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±—É—é –º—ã—Å–ª—å, —è —Å–æ—Ö—Ä–∞–Ω—é –µ—ë."
    )


# üì• --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    data = load_data()
    user_id = str(call.from_user.id)

    if call.data == "inbox":
        if user_id not in data or not data[user_id]:
            bot.answer_callback_query(call.id, "–ü–æ–∫–∞ –Ω–µ—Ç –º—ã—Å–ª–µ–π üóíÔ∏è")
            return
        thoughts = "\n\n".join(
            [f"üí≠ {t['text']} ({t['time']})" for t in data[user_id][-10:]]
        )
        bot.send_message(call.message.chat.id, f"üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º—ã—Å–ª–∏:\n\n{thoughts}")

    elif call.data == "review":
        today = datetime.now().strftime("%Y-%m-%d")
        today_thoughts = [
            t["text"] for t in data.get(user_id, []) if today in t["time"]
        ]
        if not today_thoughts:
            bot.answer_callback_query(call.id, "–°–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç ‚òÄÔ∏è")
            return
        joined = "\n".join([f"üí° {t}" for t in today_thoughts])
        bot.send_message(call.message.chat.id, f"üåÖ –ú—ã—Å–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{joined}")

    elif call.data == "tags":
        tags = set()
        for t in data.get(user_id, []):
            tags.update(t["tags"])
        if not tags:
            bot.answer_callback_query(call.id, "–ü–æ–∫–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤ üè∑Ô∏è")
            return
        bot.send_message(call.message.chat.id, "üìö –¢–≤–æ–∏ —Ç–µ–≥–∏:\n" + ", ".join(f"#{t}" for t in sorted(tags)))

    elif call.data == "export":
        if user_id not in data or not data[user_id]:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –º—ã—Å–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ üìÇ")
            return
        filename = f"thoughts_{user_id}.txt"
        with open(filename, "w", encoding="utf-8") as f:
            for t in data[user_id]:
                tags = " ".join([f"#{tag}" for tag in t["tags"]])
                f.write(f"{t['time']} ‚Äî {t['text']} {tags}\n")
        with open(filename, "rb") as f:
            bot.send_document(call.message.chat.id, f)
        os.remove(filename)

    elif call.data == "clear":
        data[user_id] = []
        save_data(data)
        bot.send_message(call.message.chat.id, "üßπ –í—Å–µ –º—ã—Å–ª–∏ –æ—á–∏—â–µ–Ω—ã!")

    bot.answer_callback_query(call.id)


# üí¨ --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º—ã—Å–ª–∏ ---
@bot.message_handler(func=lambda message: True)
def save_thought(message):
    text = message.text.strip()
    if not text:
        return
    add_thought(message.from_user.id, text)
    bot.send_message(
        message.chat.id,
        "üí° –ú—ã—Å–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
        reply_markup=main_menu()
    )


# üöÄ –ó–∞–ø—É—Å–∫
bot.polling(none_stop=True)
