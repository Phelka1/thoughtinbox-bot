import os, json, random
from datetime import datetime
from telebot import TeleBot, types
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

TOKEN = os.getenv("TOKEN")
bot = TeleBot(TOKEN, parse_mode="HTML")

DATA_FILE = "thoughts.json"
REMIND_FILE = "reminders.json"
scheduler = BackgroundScheduler(timezone="UTC")
scheduler.start()


# ==== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ====
def read_json(path, default):
    if not os.path.exists(path):
        return default
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def write_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_data():
    return read_json(DATA_FILE, {})

def save_data(data):
    write_json(DATA_FILE, data)


# ==== –†–∞–±–æ—Ç–∞ —Å –º—ã—Å–ª—è–º–∏ ====
def add_thought(uid, text):
    data = load_data()
    u = str(uid)
    if u not in data:
        data[u] = []
    tags = [w[1:].lower() for w in text.split() if w.startswith("#")]
    data[u].append({
        "id": len(data[u]) + 1,
        "text": text,
        "tags": tags,
        "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    })
    save_data(data)


# ==== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ====
def main_menu():
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("üìã –ú—ã—Å–ª–∏", callback_data="inbox"),
        types.InlineKeyboardButton("üåÖ –°–µ–≥–æ–¥–Ω—è", callback_data="today")
    )
    kb.add(
        types.InlineKeyboardButton("üè∑Ô∏è –¢–µ–≥–∏", callback_data="tags"),
        types.InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export")
    )
    kb.add(
        types.InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è", callback_data="random"),
        types.InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    )
    kb.add(types.InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear"))
    return kb


# ==== –ö–æ–º–∞–Ω–¥—ã ====
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(
        message.chat.id,
        "üêù –ü—Ä–∏–≤–µ—Ç! –Ø ThoughtInbox ‚Äî –ø—á–µ–ª–∞, —Å–æ–±–∏—Ä–∞—é—â–∞—è —Ç–≤–æ–∏ –º—ã—Å–ª–∏ –≤ —É–ª–µ–π.\n"
        "–ü–∏—à–∏ –∏–¥–µ—é, –¥–æ–±–∞–≤–ª—è–π #—Ç–µ–≥–∏ ‚Äî –∏ —è –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω—é.\n\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=["help"])
def help_cmd(message):
    bot.send_message(
        message.chat.id,
        "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
        "/inbox ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º—ã—Å–ª–∏\n"
        "/review ‚Äî –º—ã—Å–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/tags ‚Äî –≤—Å–µ —Ç–µ–≥–∏\n"
        "/export ‚Äî —Å–∫–∞—á–∞—Ç—å –º—ã—Å–ª–∏\n"
        "/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/remind HH:MM ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–∞–∑ –≤ –¥–µ–Ω—å\n"
        "/remind off ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/find —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–∏—Å–∫ –ø–æ –º—ã—Å–ª—è–º\n"
        "/random ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –º—ã—Å–ª—å\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç ‚Äî —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ."
    )


@bot.message_handler(commands=["find"])
def find_cmd(message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /find —Å–ª–æ–≤–æ")
        return
    query = args[1].lower()
    data = load_data()
    uid = str(message.from_user.id)
    results = [t for t in data.get(uid, []) if query in t["text"].lower()]
    if not results:
        bot.send_message(message.chat.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üîç")
        return
    msg = "\n".join([f"‚Ä¢ {t['text']} ({t['time']})" for t in results[-10:]])
    bot.send_message(message.chat.id, f"üîé –ù–∞–π–¥–µ–Ω–æ:\n{msg}")


@bot.message_handler(commands=["review"])
def review_cmd(message):
    data = load_data()
    uid = str(message.from_user.id)
    today = datetime.utcnow().strftime("%Y-%m-%d")
    today_items = [t for t in data.get(uid, []) if today in t["time"]]
    if not today_items:
        bot.send_message(message.chat.id, "–°–µ–≥–æ–¥–Ω—è –º—ã—Å–ª–µ–π –Ω–µ—Ç ‚òÄÔ∏è")
        return
    msg = "\n".join([f"‚Ä¢ {t['text']}" for t in today_items])
    bot.send_message(message.chat.id, f"üåÖ –ú—ã—Å–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{msg}")


@bot.message_handler(commands=["export"])
def export_cmd(message):
    data = load_data()
    uid = str(message.from_user.id)
    items = data.get(uid, [])
    if not items:
        bot.send_message(message.chat.id, "–ù–µ—Ç –º—ã—Å–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ üìÇ")
        return

    fname = f"thoughts_{uid}.txt"
    with open(fname, "w", encoding="utf-8") as f:
        for t in items:
            tags = " ".join(f"#{tg}" for tg in t["tags"])
            f.write(f"{t['time']} ‚Äî {t['text']} {tags}\n")
    with open(fname, "rb") as f:
        bot.send_document(message.chat.id, f)
    os.remove(fname)


@bot.message_handler(commands=["stats"])
def stats_cmd(message):
    data = load_data()
    uid = str(message.from_user.id)
    items = data.get(uid, [])
    if not items:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –ø—É—Å—Ç–æ üìâ")
        return
    total = len(items)
    tags = {}
    for t in items:
        for tg in t["tags"]:
            tags[tg] = tags.get(tg, 0) + 1
    top = ", ".join([f"#{k}({v})" for k, v in sorted(tags.items(), key=lambda x: -x[1])])
    bot.send_message(message.chat.id, f"üìà –í—Å–µ–≥–æ –º—ã—Å–ª–µ–π: {total}\n–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏: {top if top else '‚Äî'}")


# ==== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ====
def reminders_db():
    return read_json(REMIND_FILE, {})

def save_reminders(data):
    write_json(REMIND_FILE, data)

def schedule(uid, h, m):
    job_id = f"rem_{uid}"
    try: scheduler.remove_job(job_id)
    except: pass
    trig = CronTrigger(hour=h, minute=m)
    scheduler.add_job(lambda: send_rem(uid), trig, id=job_id)

def send_rem(uid):
    bot.send_message(int(uid), "üêù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ï—Å—Ç—å –Ω–æ–≤–∞—è –º—ã—Å–ª—å –¥–ª—è —É–ª–µ—è? üí≠", reply_markup=main_menu())

@bot.message_handler(commands=["remind"])
def remind_cmd(message):
    args = message.text.split(maxsplit=1)
    rem = reminders_db()
    uid = str(message.from_user.id)

    if len(args) == 1:
        val = rem.get(uid, "off")
        bot.send_message(message.chat.id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–π—á–∞—Å: {val}")
        return

    arg = args[1].strip().lower()
    if arg == "off":
        try: scheduler.remove_job(f"rem_{uid}")
        except: pass
        rem[uid] = "off"
        save_reminders(rem)
        bot.send_message(message.chat.id, "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        return

    try:
        h, m = map(int, arg.split(":"))
        schedule(uid, h, m)
        rem[uid] = arg
        save_reminders(rem)
        bot.send_message(message.chat.id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {arg}")
    except:
        bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç: /remind HH:MM")


# ==== Inline –∫–Ω–æ–ø–∫–∏ ====
@bot.callback_query_handler(func=lambda c: True)
def callback(c):
    data = load_data()
    uid = str(c.from_user.id)

    if c.data == "inbox":
        items = data.get(uid, [])
        if not items:
            bot.answer_callback_query(c.id, "–ù–µ—Ç –º—ã—Å–ª–µ–π üóíÔ∏è")
            return
        msg = "\n".join([f"‚Ä¢ {t['text']} ({t['time']})" for t in items[-10:]])
        bot.send_message(c.message.chat.id, f"üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ:\n{msg}")

    elif c.data == "today":
        cmd = types.SimpleNamespace(message=c.message, from_user=c.from_user)
        review_cmd(cmd)

    elif c.data == "tags":
        tags = set()
        for t in data.get(uid, []):
            for tg in t["tags"]:
                tags.add(tg)
        if not tags:
            bot.send_message(c.message.chat.id, "üè∑Ô∏è –¢–µ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        kb = types.InlineKeyboardMarkup()
        for tg in sorted(tags):
            kb.add(types.InlineKeyboardButton(f"#{tg}", callback_data=f"tag_{tg}"))
        bot.send_message(c.message.chat.id, "üè∑Ô∏è –í—ã–±–µ—Ä–∏ —Ç–µ–≥:", reply_markup=kb)

    elif c.data.startswith("tag_"):
        tag = c.data[4:]
        items = [t for t in data.get(uid, []) if tag in t["tags"]]
        msg = "\n".join([f"‚Ä¢ {t['text']}" for t in items]) or "–ù–µ—Ç –º—ã—Å–ª–µ–π —Å —ç—Ç–∏–º —Ç–µ–≥–æ–º."
        bot.send_message(c.message.chat.id, f"#{tag}:\n{msg}")

    elif c.data == "export":
        cmd = types.SimpleNamespace(message=c.message, from_user=c.from_user)
        export_cmd(cmd)

    elif c.data == "random":
        items = data.get(uid, [])
        if not items:
            bot.answer_callback_query(c.id, "–ü–æ–∫–∞ –ø—É—Å—Ç–æ üêù")
            return
        t = random.choice(items)
        bot.send_message(c.message.chat.id, f"üé≤ {t['text']}")

    elif c.data == "stats":
        cmd = types.SimpleNamespace(message=c.message, from_user=c.from_user)
        stats_cmd(cmd)

    elif c.data == "clear":
        data[uid] = []
        save_data(data)
        bot.send_message(c.message.chat.id, "üßπ –í—Å—ë –æ—á–∏—â–µ–Ω–æ.")

    bot.answer_callback_query(c.id)


# ==== –õ—é–±–æ–π —Ç–µ–∫—Å—Ç ====
@bot.message_handler(func=lambda m: True)
def save_msg(m):
    if not m.text.startswith("/"):
        add_thought(m.from_user.id, m.text)
        bot.send_message(m.chat.id, "üí° –°–æ—Ö—Ä–∞–Ω–∏–ª!", reply_markup=main_menu())


# ==== –ó–∞–ø—É—Å–∫ ====
if __name__ == "__main__":
    for uid, val in reminders_db().items():
        if val != "off":
            try:
                h, m = map(int, val.split(":"))
                schedule(uid, h, m)
            except: pass
    bot.polling(none_stop=True)
    
    
